plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring actuator - Spring Boot Application의 상태를 관리해준다.
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // spring web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // spring jpa - jpa 기능을 사용하도록 하는 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // rest repository - 엔티티 클래스와 레포지토리를 이용해서 바로 restful한 api 작성을 돕는 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // Rest Repositories HAL Explorer - rest repository 기능을 쉽게 확인하고 테스트할 수 있는 라이브러리
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    // h2 db
    runtimeOnly 'com.h2database:h2'
    // mysql db
    runtimeOnly 'com.mysql:mysql-connector-j'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    // Spring Boot DevTools - 프로젝트를 자동으로 재시작해주고, 정적 파일 수정 시 바로 반영해주는 라이브러리
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // lombok 관련
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    // queryDSL 설정
    // collections는 그렇게 중요한 부분은 아니고 jpa,core,apt 부분은 중요한 설정이다
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

    // querydsl 사용하다 보면 나오는 에러 메시지 대응하는 설정
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응코드
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부
// QClass가 빌드 디렉토리에 들어가는데 원하는 위치에 꺼내기 위해서
// 꺼내는 이유는 Gradle이 탐색하는 영역과 intellij가 탐색하는 영역이 중복될 시
// 이미 찾은 클래스를 다시 찾아서 충돌이 나는 걸 방지하기 위해서
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
